[
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "The NLopt API revolves around an object of this class. Via methods of this object, all of the parameters of the optimization are specified (dimensions, algorithm, stopping criteria, constraints, objective function, etcetera), and then one finally calls the 'optimize' method in order to perform the optimization.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 313,
                  "offset": 312
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 313,
              "offset": 312
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 313,
          "offset": 312
        }
      }
    },
    "tags": [],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 3,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 168,
          "column": 1
        }
      },
      "file": "/Users/bbevillard/Documents/Bev/Code/Web/nlopt-js/src/classes/Optimize.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "algorithm",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "One of the possible optimization Algorithms",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 44,
                      "offset": 43
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 44,
                  "offset": 43
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 44,
              "offset": 43
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "Algorithm"
        }
      },
      {
        "title": "param",
        "name": "n",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Dimensionality of the problem (number of optimization parameters)",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 66,
                      "offset": 65
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 66,
                  "offset": 65
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 66,
              "offset": 65
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "number"
        }
      }
    ],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "constructorComment": {
      "description": {
        "type": "root",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "value": "Creates a m * n matrix filled with zeros",
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 41,
                    "offset": 40
                  },
                  "indent": []
                }
              }
            ],
            "position": {
              "start": {
                "line": 1,
                "column": 1,
                "offset": 0
              },
              "end": {
                "line": 1,
                "column": 41,
                "offset": 40
              },
              "indent": []
            }
          }
        ],
        "position": {
          "start": {
            "line": 1,
            "column": 1,
            "offset": 0
          },
          "end": {
            "line": 1,
            "column": 41,
            "offset": 40
          }
        }
      },
      "tags": [
        {
          "title": "param",
          "description": "One of the possible optimization Algorithms",
          "lineNumber": 2,
          "type": {
            "type": "NameExpression",
            "name": "Algorithm"
          },
          "name": "algorithm"
        },
        {
          "title": "param",
          "description": "Dimensionality of the problem (number of optimization parameters)",
          "lineNumber": 3,
          "type": {
            "type": "NameExpression",
            "name": "number"
          },
          "name": "n"
        },
        {
          "title": "example",
          "description": "const opt = new nlopt.Optimize(nlopt.Algorithm.LD_AUGLAG, 2);\nreturn opt;",
          "lineNumber": 4
        }
      ],
      "loc": {
        "start": {
          "line": 5,
          "column": 2
        },
        "end": {
          "line": 12,
          "column": 5
        }
      },
      "context": {
        "loc": {
          "start": {
            "line": 13,
            "column": 2
          },
          "end": {
            "line": 13,
            "column": 31
          }
        },
        "file": "/Users/bbevillard/Documents/Bev/Code/Web/nlopt-js/src/classes/Optimize.js",
        "sortKey": "!/Users/bbevillard/Documents/Bev/Code/Web/nlopt-js/src/classes/Optimize.js 00000013",
        "code": "{\n  /**\n   * Creates a m * n matrix filled with zeros\n   * @param {Algorithm} algorithm - One of the possible optimization Algorithms\n   * @param {number} n - Dimensionality of the problem (number of optimization parameters)\n   * @example\n   * const opt = new nlopt.Optimize(nlopt.Algorithm.LD_AUGLAG, 2);\n   * return opt;\n   */\n  constructor(algorithm, n) { }\n\n\n  /**\n   * Specify the objective function to maximize\n   * The objective function should be of the form\n   *    (x: number[], grad: number[]) => number\n   *    - x is the current optimization point\n   *    - grad, if non null, must be populated with the gradient of the function at that point\n   *    The function must return the objective function at that point\n   * @param {Function} fun - Objective function\n   * @param {number} tol - Maximization tolerance\n   * @example\n   * const opt = new nlopt.Optimize(nlopt.Algorithm.LD_AUGLAG, 2);\n   * opt.setMinObjective((x, grad) => {\n   *   if (grad) {\n   *     grad[0] = 0\n   *     grad[1] = 0.5 / Math.sqrt(x[1])\n   *   }\n   *   return Math.sqrt(x[1])\n   * }, 1e-4);\n   * return opt;\n   */\n  setMaxObjective(fun, tol) { }\n\n  /**\n   * Specify the objective function to minimize\n   * Similar to 'setMaxObjective', see above\n   * @param {fun} fun - Objective function\n   * @param {number} tol - Maximization tolerance\n   */\n  setMinObjective(fun, tol) { }\n\n  /**\n   * Specify an upper bound contraint on the optimization parameters\n   * @param {Array} bounds - Upper bound array\n   * @example\n   * const opt = new nlopt.Optimize(nlopt.Algorithm.LD_AUGLAG, 2);\n   * opt.setUpperBounds([2, 5]);\n   * return opt;\n   */\n  setUpperBounds(bounds) { }\n\n  /**\n   * Specify a lower bound contraint on the optimization parameters\n   * @param {Array} bounds - Lower bound array\n   * @example\n   * const opt = new nlopt.Optimize(nlopt.Algorithm.LD_AUGLAG, 2);\n   * opt.setLowerBounds([-2, -5]);\n   * return opt;\n   */\n  setLowerBounds(bounds) { }\n\n  /**\n   * Add a inequality constraint can be specified. the parameters are the same as 'setMinObjective' and 'setMaxObjective'\n   * @param {Function} fun - Constraint function\n   * @param {number} tol - Tolerance\n   * @example\n   * const opt = new nlopt.Optimize(nlopt.Algorithm.LD_AUGLAG, 2);\n   * const p1 = { a: 2, b: 0 }\n   * opt.addInequalityConstraint((x, grad) => {\n   *   if (grad) {\n   *     grad[0] = 3 * p1.a * Math.pow(p1.a * x[0] + p1.b, 2)\n   *     grad[1] = -1.0\n   *   }\n   *   return (Math.pow(p1.a * x[0] + p1.b, 3) - x[1])\n   * }, 1e-8);\n   * return opt;\n   */\n  addInequalityConstraint(fun, tol) { }\n\n  /**\n   * Add a equality constraint. The parameters are the same as 'addInequalityConstraint'\n   * @param {Function} fun - Constraint function\n   * @param {number} tol - Tolerance\n   */\n  addEqualityConstraint(fun, tol) { }\n\n  /**\n   * Add a vector valued inequality constraints\n   * The constraint function should be of the form\n   *    (x: number[], grad: number[], r: number[]) => number\n   *    - x is the current optimization point\n   *    - grad, if non null, must be populated with the gradient of the function at that point\n   *    - r is the vector value of the constraints\n   *    The function must return the objective function at that point\n   * @param {Function} fun - Constraint function\n   * @param {Array} tol - Tolerance array, one per constraint\n   * @example\n   * const opt = new nlopt.Optimize(nlopt.Algorithm.LD_AUGLAG, 2);\n   * const p1 = { a: 2, b: 0 }\n   * const p2 = { a: -1, b: 1 }\n   * opt.addEqualityMConstraint((x, grad, r) => {\n   *   if (grad) {\n   *     grad[0] = 3 * p1.a * Math.pow(p1.a * x[0] + p1.b, 2)\n   *     grad[1] = -1.0\n   *     grad[2] = 3 * p2.a * Math.pow(p2.a * x[0] + p2.b, 2)\n   *     grad[3] = -1.0\n   *   }\n   *   r[0] = (Math.pow(p1.a * x[0] + p1.b, 3) - x[1])\n   *   r[1] = (Math.pow(p2.a * x[0] + p2.b, 3) - x[1])\n   * }, [1e-8, 1e-8]);\n   * return opt;\n   */\n  addInequalityMConstraint(fun, tol) { }\n\n  /**\n   * Add a vector valued equality constraints. The parameters are the same as 'addInequalityMConstraint'\n   * @param {Function} fun - Constraint function\n   * @param {Array} tol - Tolerance\n   */\n  addEqualityMConstraint(fun, tol) { }\n\n  /**\n   * Set a max time stopping criterion\n   * @param {number} t - Max optimisation time\n   */\n  setMaxtime(t) { }\n\n  /**\n   * Set a max evaluation stopping criterion\n   * @param {number} count - Max evalutation count\n   */\n  setMaxeval(count) { }\n\n  /**\n   * Run the optimizer, and returns upon completion an object containing the optimized values of the optimization parameters as well as the corresponding value of the objective function\n   * @param {Array} x0 - Initial guess for the optimization parameters\n   * @returns {Object} - { x: number[], value: number }\n   * @example\n   * const opt = new nlopt.Optimize(nlopt.Algorithm.LD_AUGLAG, 2);\n   * opt.setMinObjective((x, grad) => {\n   *   if (grad) {\n   *     grad[0] = 0\n   *     grad[1] = 0.5 / Math.sqrt(x[1])\n   *   }\n   *   return Math.sqrt(x[1])\n   * }, 1e-4);\n   * opt.setLowerBounds([-1e500, 1e-8]);\n   * const p1 = { a: 2, b: 0 };\n   * const p2 = { a: -1, b: 1 };\n   * opt.addEqualityMConstraint((x, grad, r) => {\n   *   if (grad) {\n   *     grad[0] = 3 * p1.a * Math.pow(p1.a * x[0] + p1.b, 2)\n   *     grad[1] = -1.0\n   *     grad[2] = 3 * p2.a * Math.pow(p2.a * x[0] + p2.b, 2)\n   *     grad[3] = -1.0\n   *   }\n   *   r[0] = (Math.pow(p1.a * x[0] + p1.b, 3) - x[1])\n   *   r[1] = (Math.pow(p2.a * x[0] + p2.b, 3) - x[1])\n   * }, [1e-8, 1e-8]);\n   * const res = opt.optimize([1, 6]);\n   * return {x: res.x, value: res.value};\n   */\n  optimize(x0) { }\n}"
      },
      "augments": [],
      "errors": [],
      "examples": [
        {
          "description": "const opt = new nlopt.Optimize(nlopt.Algorithm.LD_AUGLAG, 2);\nreturn opt;"
        }
      ],
      "implements": [],
      "params": [
        {
          "title": "param",
          "name": "algorithm",
          "lineNumber": 2,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "One of the possible optimization Algorithms",
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 44,
                        "offset": 43
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 44,
                    "offset": 43
                  },
                  "indent": []
                }
              }
            ],
            "position": {
              "start": {
                "line": 1,
                "column": 1,
                "offset": 0
              },
              "end": {
                "line": 1,
                "column": 44,
                "offset": 43
              }
            }
          },
          "type": {
            "type": "NameExpression",
            "name": "Algorithm"
          }
        },
        {
          "title": "param",
          "name": "n",
          "lineNumber": 3,
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Dimensionality of the problem (number of optimization parameters)",
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 66,
                        "offset": 65
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 66,
                    "offset": 65
                  },
                  "indent": []
                }
              }
            ],
            "position": {
              "start": {
                "line": 1,
                "column": 1,
                "offset": 0
              },
              "end": {
                "line": 1,
                "column": 66,
                "offset": 65
              }
            }
          },
          "type": {
            "type": "NameExpression",
            "name": "number"
          }
        }
      ],
      "properties": [],
      "returns": [],
      "sees": [],
      "throws": [],
      "todos": [],
      "yields": []
    },
    "name": "Optimize",
    "kind": "class",
    "members": {
      "global": [],
      "inner": [],
      "instance": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Specify the objective function to maximize\nThe objective function should be of the form\n   (x: number[], grad: number[]) => number",
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 3,
                        "column": 43,
                        "offset": 130
                      },
                      "indent": [
                        1,
                        1
                      ]
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 3,
                    "column": 43,
                    "offset": 130
                  },
                  "indent": [
                    1,
                    1
                  ]
                }
              },
              {
                "type": "list",
                "ordered": false,
                "start": null,
                "loose": false,
                "children": [
                  {
                    "type": "listItem",
                    "loose": false,
                    "checked": null,
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "x is the current optimization point",
                            "position": {
                              "start": {
                                "line": 4,
                                "column": 6,
                                "offset": 136
                              },
                              "end": {
                                "line": 4,
                                "column": 41,
                                "offset": 171
                              },
                              "indent": []
                            }
                          }
                        ],
                        "position": {
                          "start": {
                            "line": 4,
                            "column": 6,
                            "offset": 136
                          },
                          "end": {
                            "line": 4,
                            "column": 41,
                            "offset": 171
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 4,
                        "column": 1,
                        "offset": 131
                      },
                      "end": {
                        "line": 4,
                        "column": 41,
                        "offset": 171
                      },
                      "indent": []
                    }
                  },
                  {
                    "type": "listItem",
                    "loose": false,
                    "checked": null,
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "grad, if non null, must be populated with the gradient of the function at that point\nThe function must return the objective function at that point",
                            "position": {
                              "start": {
                                "line": 5,
                                "column": 6,
                                "offset": 177
                              },
                              "end": {
                                "line": 6,
                                "column": 65,
                                "offset": 326
                              },
                              "indent": [
                                4
                              ]
                            }
                          }
                        ],
                        "position": {
                          "start": {
                            "line": 5,
                            "column": 6,
                            "offset": 177
                          },
                          "end": {
                            "line": 6,
                            "column": 65,
                            "offset": 326
                          },
                          "indent": [
                            4
                          ]
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 5,
                        "column": 1,
                        "offset": 172
                      },
                      "end": {
                        "line": 6,
                        "column": 65,
                        "offset": 326
                      },
                      "indent": [
                        1
                      ]
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 4,
                    "column": 1,
                    "offset": 131
                  },
                  "end": {
                    "line": 6,
                    "column": 65,
                    "offset": 326
                  },
                  "indent": [
                    1,
                    1
                  ]
                }
              }
            ],
            "position": {
              "start": {
                "line": 1,
                "column": 1,
                "offset": 0
              },
              "end": {
                "line": 6,
                "column": 65,
                "offset": 326
              }
            }
          },
          "tags": [
            {
              "title": "param",
              "description": "Objective function",
              "lineNumber": 7,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "fun"
            },
            {
              "title": "param",
              "description": "Maximization tolerance",
              "lineNumber": 8,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "tol"
            },
            {
              "title": "example",
              "description": "const opt = new nlopt.Optimize(nlopt.Algorithm.LD_AUGLAG, 2);\nopt.setMinObjective((x, grad) => {\n  if (grad) {\n    grad[0] = 0\n    grad[1] = 0.5 / Math.sqrt(x[1])\n  }\n  return Math.sqrt(x[1])\n}, 1e-4);\nreturn opt;",
              "lineNumber": 9
            }
          ],
          "loc": {
            "start": {
              "line": 16,
              "column": 2
            },
            "end": {
              "line": 35,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 36,
                "column": 2
              },
              "end": {
                "line": 36,
                "column": 31
              }
            },
            "file": "/Users/bbevillard/Documents/Bev/Code/Web/nlopt-js/src/classes/Optimize.js"
          },
          "augments": [],
          "examples": [
            {
              "description": "const opt = new nlopt.Optimize(nlopt.Algorithm.LD_AUGLAG, 2);\nopt.setMinObjective((x, grad) => {\n  if (grad) {\n    grad[0] = 0\n    grad[1] = 0.5 / Math.sqrt(x[1])\n  }\n  return Math.sqrt(x[1])\n}, 1e-4);\nreturn opt;"
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "fun",
              "lineNumber": 7,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Objective function",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 19,
                            "offset": 18
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 19,
                        "offset": 18
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 19,
                    "offset": 18
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "Function"
              }
            },
            {
              "title": "param",
              "name": "tol",
              "lineNumber": 8,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Maximization tolerance",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 23,
                            "offset": 22
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 23,
                        "offset": 22
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 23,
                    "offset": 22
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "setMaxObjective",
          "kind": "function",
          "memberof": "Optimize",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Optimize",
              "kind": "class"
            },
            {
              "name": "setMaxObjective",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "Optimize#setMaxObjective"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Specify the objective function to minimize\nSimilar to 'setMaxObjective', see above",
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 2,
                        "column": 40,
                        "offset": 82
                      },
                      "indent": [
                        1
                      ]
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 2,
                    "column": 40,
                    "offset": 82
                  },
                  "indent": [
                    1
                  ]
                }
              }
            ],
            "position": {
              "start": {
                "line": 1,
                "column": 1,
                "offset": 0
              },
              "end": {
                "line": 2,
                "column": 40,
                "offset": 82
              }
            }
          },
          "tags": [
            {
              "title": "param",
              "description": "Objective function",
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "fun"
              },
              "name": "fun"
            },
            {
              "title": "param",
              "description": "Maximization tolerance",
              "lineNumber": 4,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "tol"
            }
          ],
          "loc": {
            "start": {
              "line": 38,
              "column": 2
            },
            "end": {
              "line": 43,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 44,
                "column": 2
              },
              "end": {
                "line": 44,
                "column": 31
              }
            },
            "file": "/Users/bbevillard/Documents/Bev/Code/Web/nlopt-js/src/classes/Optimize.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "fun",
              "lineNumber": 3,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Objective function",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 19,
                            "offset": 18
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 19,
                        "offset": 18
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 19,
                    "offset": 18
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "fun"
              }
            },
            {
              "title": "param",
              "name": "tol",
              "lineNumber": 4,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Maximization tolerance",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 23,
                            "offset": 22
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 23,
                        "offset": 22
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 23,
                    "offset": 22
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "setMinObjective",
          "kind": "function",
          "memberof": "Optimize",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Optimize",
              "kind": "class"
            },
            {
              "name": "setMinObjective",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "Optimize#setMinObjective"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Specify an upper bound contraint on the optimization parameters",
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 64,
                        "offset": 63
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 64,
                    "offset": 63
                  },
                  "indent": []
                }
              }
            ],
            "position": {
              "start": {
                "line": 1,
                "column": 1,
                "offset": 0
              },
              "end": {
                "line": 1,
                "column": 64,
                "offset": 63
              }
            }
          },
          "tags": [
            {
              "title": "param",
              "description": "Upper bound array",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Array"
              },
              "name": "bounds"
            },
            {
              "title": "example",
              "description": "const opt = new nlopt.Optimize(nlopt.Algorithm.LD_AUGLAG, 2);\nopt.setUpperBounds([2, 5]);\nreturn opt;",
              "lineNumber": 3
            }
          ],
          "loc": {
            "start": {
              "line": 46,
              "column": 2
            },
            "end": {
              "line": 53,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 54,
                "column": 2
              },
              "end": {
                "line": 54,
                "column": 28
              }
            },
            "file": "/Users/bbevillard/Documents/Bev/Code/Web/nlopt-js/src/classes/Optimize.js"
          },
          "augments": [],
          "examples": [
            {
              "description": "const opt = new nlopt.Optimize(nlopt.Algorithm.LD_AUGLAG, 2);\nopt.setUpperBounds([2, 5]);\nreturn opt;"
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "bounds",
              "lineNumber": 2,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Upper bound array",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 18,
                            "offset": 17
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 18,
                        "offset": 17
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 18,
                    "offset": 17
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "Array"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "setUpperBounds",
          "kind": "function",
          "memberof": "Optimize",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Optimize",
              "kind": "class"
            },
            {
              "name": "setUpperBounds",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "Optimize#setUpperBounds"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Specify a lower bound contraint on the optimization parameters",
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 63,
                        "offset": 62
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 63,
                    "offset": 62
                  },
                  "indent": []
                }
              }
            ],
            "position": {
              "start": {
                "line": 1,
                "column": 1,
                "offset": 0
              },
              "end": {
                "line": 1,
                "column": 63,
                "offset": 62
              }
            }
          },
          "tags": [
            {
              "title": "param",
              "description": "Lower bound array",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Array"
              },
              "name": "bounds"
            },
            {
              "title": "example",
              "description": "const opt = new nlopt.Optimize(nlopt.Algorithm.LD_AUGLAG, 2);\nopt.setLowerBounds([-2, -5]);\nreturn opt;",
              "lineNumber": 3
            }
          ],
          "loc": {
            "start": {
              "line": 56,
              "column": 2
            },
            "end": {
              "line": 63,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 64,
                "column": 2
              },
              "end": {
                "line": 64,
                "column": 28
              }
            },
            "file": "/Users/bbevillard/Documents/Bev/Code/Web/nlopt-js/src/classes/Optimize.js"
          },
          "augments": [],
          "examples": [
            {
              "description": "const opt = new nlopt.Optimize(nlopt.Algorithm.LD_AUGLAG, 2);\nopt.setLowerBounds([-2, -5]);\nreturn opt;"
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "bounds",
              "lineNumber": 2,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Lower bound array",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 18,
                            "offset": 17
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 18,
                        "offset": 17
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 18,
                    "offset": 17
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "Array"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "setLowerBounds",
          "kind": "function",
          "memberof": "Optimize",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Optimize",
              "kind": "class"
            },
            {
              "name": "setLowerBounds",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "Optimize#setLowerBounds"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Add a inequality constraint can be specified. the parameters are the same as 'setMinObjective' and 'setMaxObjective'",
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 117,
                        "offset": 116
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 117,
                    "offset": 116
                  },
                  "indent": []
                }
              }
            ],
            "position": {
              "start": {
                "line": 1,
                "column": 1,
                "offset": 0
              },
              "end": {
                "line": 1,
                "column": 117,
                "offset": 116
              }
            }
          },
          "tags": [
            {
              "title": "param",
              "description": "Constraint function",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "fun"
            },
            {
              "title": "param",
              "description": "Tolerance",
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "tol"
            },
            {
              "title": "example",
              "description": "const opt = new nlopt.Optimize(nlopt.Algorithm.LD_AUGLAG, 2);\nconst p1 = { a: 2, b: 0 }\nopt.addInequalityConstraint((x, grad) => {\n  if (grad) {\n    grad[0] = 3 * p1.a * Math.pow(p1.a * x[0] + p1.b, 2)\n    grad[1] = -1.0\n  }\n  return (Math.pow(p1.a * x[0] + p1.b, 3) - x[1])\n}, 1e-8);\nreturn opt;",
              "lineNumber": 4
            }
          ],
          "loc": {
            "start": {
              "line": 66,
              "column": 2
            },
            "end": {
              "line": 81,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 82,
                "column": 2
              },
              "end": {
                "line": 82,
                "column": 39
              }
            },
            "file": "/Users/bbevillard/Documents/Bev/Code/Web/nlopt-js/src/classes/Optimize.js"
          },
          "augments": [],
          "examples": [
            {
              "description": "const opt = new nlopt.Optimize(nlopt.Algorithm.LD_AUGLAG, 2);\nconst p1 = { a: 2, b: 0 }\nopt.addInequalityConstraint((x, grad) => {\n  if (grad) {\n    grad[0] = 3 * p1.a * Math.pow(p1.a * x[0] + p1.b, 2)\n    grad[1] = -1.0\n  }\n  return (Math.pow(p1.a * x[0] + p1.b, 3) - x[1])\n}, 1e-8);\nreturn opt;"
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "fun",
              "lineNumber": 2,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Constraint function",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 20,
                            "offset": 19
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 20,
                        "offset": 19
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 20,
                    "offset": 19
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "Function"
              }
            },
            {
              "title": "param",
              "name": "tol",
              "lineNumber": 3,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Tolerance",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 10,
                            "offset": 9
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 10,
                        "offset": 9
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 10,
                    "offset": 9
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "addInequalityConstraint",
          "kind": "function",
          "memberof": "Optimize",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Optimize",
              "kind": "class"
            },
            {
              "name": "addInequalityConstraint",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "Optimize#addInequalityConstraint"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Add a equality constraint. The parameters are the same as 'addInequalityConstraint'",
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 84,
                        "offset": 83
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 84,
                    "offset": 83
                  },
                  "indent": []
                }
              }
            ],
            "position": {
              "start": {
                "line": 1,
                "column": 1,
                "offset": 0
              },
              "end": {
                "line": 1,
                "column": 84,
                "offset": 83
              }
            }
          },
          "tags": [
            {
              "title": "param",
              "description": "Constraint function",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "fun"
            },
            {
              "title": "param",
              "description": "Tolerance",
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "tol"
            }
          ],
          "loc": {
            "start": {
              "line": 84,
              "column": 2
            },
            "end": {
              "line": 88,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 89,
                "column": 2
              },
              "end": {
                "line": 89,
                "column": 37
              }
            },
            "file": "/Users/bbevillard/Documents/Bev/Code/Web/nlopt-js/src/classes/Optimize.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "fun",
              "lineNumber": 2,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Constraint function",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 20,
                            "offset": 19
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 20,
                        "offset": 19
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 20,
                    "offset": 19
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "Function"
              }
            },
            {
              "title": "param",
              "name": "tol",
              "lineNumber": 3,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Tolerance",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 10,
                            "offset": 9
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 10,
                        "offset": 9
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 10,
                    "offset": 9
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "addEqualityConstraint",
          "kind": "function",
          "memberof": "Optimize",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Optimize",
              "kind": "class"
            },
            {
              "name": "addEqualityConstraint",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "Optimize#addEqualityConstraint"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Add a vector valued inequality constraints\nThe constraint function should be of the form\n   (x: number[], grad: number[], r: number[]) => number",
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 3,
                        "column": 56,
                        "offset": 144
                      },
                      "indent": [
                        1,
                        1
                      ]
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 3,
                    "column": 56,
                    "offset": 144
                  },
                  "indent": [
                    1,
                    1
                  ]
                }
              },
              {
                "type": "list",
                "ordered": false,
                "start": null,
                "loose": false,
                "children": [
                  {
                    "type": "listItem",
                    "loose": false,
                    "checked": null,
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "x is the current optimization point",
                            "position": {
                              "start": {
                                "line": 4,
                                "column": 6,
                                "offset": 150
                              },
                              "end": {
                                "line": 4,
                                "column": 41,
                                "offset": 185
                              },
                              "indent": []
                            }
                          }
                        ],
                        "position": {
                          "start": {
                            "line": 4,
                            "column": 6,
                            "offset": 150
                          },
                          "end": {
                            "line": 4,
                            "column": 41,
                            "offset": 185
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 4,
                        "column": 1,
                        "offset": 145
                      },
                      "end": {
                        "line": 4,
                        "column": 41,
                        "offset": 185
                      },
                      "indent": []
                    }
                  },
                  {
                    "type": "listItem",
                    "loose": false,
                    "checked": null,
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "grad, if non null, must be populated with the gradient of the function at that point",
                            "position": {
                              "start": {
                                "line": 5,
                                "column": 6,
                                "offset": 191
                              },
                              "end": {
                                "line": 5,
                                "column": 90,
                                "offset": 275
                              },
                              "indent": []
                            }
                          }
                        ],
                        "position": {
                          "start": {
                            "line": 5,
                            "column": 6,
                            "offset": 191
                          },
                          "end": {
                            "line": 5,
                            "column": 90,
                            "offset": 275
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 5,
                        "column": 1,
                        "offset": 186
                      },
                      "end": {
                        "line": 5,
                        "column": 90,
                        "offset": 275
                      },
                      "indent": []
                    }
                  },
                  {
                    "type": "listItem",
                    "loose": false,
                    "checked": null,
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "r is the vector value of the constraints\nThe function must return the objective function at that point",
                            "position": {
                              "start": {
                                "line": 6,
                                "column": 6,
                                "offset": 281
                              },
                              "end": {
                                "line": 7,
                                "column": 65,
                                "offset": 386
                              },
                              "indent": [
                                4
                              ]
                            }
                          }
                        ],
                        "position": {
                          "start": {
                            "line": 6,
                            "column": 6,
                            "offset": 281
                          },
                          "end": {
                            "line": 7,
                            "column": 65,
                            "offset": 386
                          },
                          "indent": [
                            4
                          ]
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 6,
                        "column": 1,
                        "offset": 276
                      },
                      "end": {
                        "line": 7,
                        "column": 65,
                        "offset": 386
                      },
                      "indent": [
                        1
                      ]
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 4,
                    "column": 1,
                    "offset": 145
                  },
                  "end": {
                    "line": 7,
                    "column": 65,
                    "offset": 386
                  },
                  "indent": [
                    1,
                    1,
                    1
                  ]
                }
              }
            ],
            "position": {
              "start": {
                "line": 1,
                "column": 1,
                "offset": 0
              },
              "end": {
                "line": 7,
                "column": 65,
                "offset": 386
              }
            }
          },
          "tags": [
            {
              "title": "param",
              "description": "Constraint function",
              "lineNumber": 8,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "fun"
            },
            {
              "title": "param",
              "description": "Tolerance array, one per constraint",
              "lineNumber": 9,
              "type": {
                "type": "NameExpression",
                "name": "Array"
              },
              "name": "tol"
            },
            {
              "title": "example",
              "description": "const opt = new nlopt.Optimize(nlopt.Algorithm.LD_AUGLAG, 2);\nconst p1 = { a: 2, b: 0 }\nconst p2 = { a: -1, b: 1 }\nopt.addEqualityMConstraint((x, grad, r) => {\n  if (grad) {\n    grad[0] = 3 * p1.a * Math.pow(p1.a * x[0] + p1.b, 2)\n    grad[1] = -1.0\n    grad[2] = 3 * p2.a * Math.pow(p2.a * x[0] + p2.b, 2)\n    grad[3] = -1.0\n  }\n  r[0] = (Math.pow(p1.a * x[0] + p1.b, 3) - x[1])\n  r[1] = (Math.pow(p2.a * x[0] + p2.b, 3) - x[1])\n}, [1e-8, 1e-8]);\nreturn opt;",
              "lineNumber": 10
            }
          ],
          "loc": {
            "start": {
              "line": 91,
              "column": 2
            },
            "end": {
              "line": 116,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 117,
                "column": 2
              },
              "end": {
                "line": 117,
                "column": 40
              }
            },
            "file": "/Users/bbevillard/Documents/Bev/Code/Web/nlopt-js/src/classes/Optimize.js"
          },
          "augments": [],
          "examples": [
            {
              "description": "const opt = new nlopt.Optimize(nlopt.Algorithm.LD_AUGLAG, 2);\nconst p1 = { a: 2, b: 0 }\nconst p2 = { a: -1, b: 1 }\nopt.addEqualityMConstraint((x, grad, r) => {\n  if (grad) {\n    grad[0] = 3 * p1.a * Math.pow(p1.a * x[0] + p1.b, 2)\n    grad[1] = -1.0\n    grad[2] = 3 * p2.a * Math.pow(p2.a * x[0] + p2.b, 2)\n    grad[3] = -1.0\n  }\n  r[0] = (Math.pow(p1.a * x[0] + p1.b, 3) - x[1])\n  r[1] = (Math.pow(p2.a * x[0] + p2.b, 3) - x[1])\n}, [1e-8, 1e-8]);\nreturn opt;"
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "fun",
              "lineNumber": 8,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Constraint function",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 20,
                            "offset": 19
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 20,
                        "offset": 19
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 20,
                    "offset": 19
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "Function"
              }
            },
            {
              "title": "param",
              "name": "tol",
              "lineNumber": 9,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Tolerance array, one per constraint",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 36,
                            "offset": 35
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 36,
                        "offset": 35
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 36,
                    "offset": 35
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "Array"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "addInequalityMConstraint",
          "kind": "function",
          "memberof": "Optimize",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Optimize",
              "kind": "class"
            },
            {
              "name": "addInequalityMConstraint",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "Optimize#addInequalityMConstraint"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Add a vector valued equality constraints. The parameters are the same as 'addInequalityMConstraint'",
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 100,
                        "offset": 99
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 100,
                    "offset": 99
                  },
                  "indent": []
                }
              }
            ],
            "position": {
              "start": {
                "line": 1,
                "column": 1,
                "offset": 0
              },
              "end": {
                "line": 1,
                "column": 100,
                "offset": 99
              }
            }
          },
          "tags": [
            {
              "title": "param",
              "description": "Constraint function",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "fun"
            },
            {
              "title": "param",
              "description": "Tolerance",
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "Array"
              },
              "name": "tol"
            }
          ],
          "loc": {
            "start": {
              "line": 119,
              "column": 2
            },
            "end": {
              "line": 123,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 124,
                "column": 2
              },
              "end": {
                "line": 124,
                "column": 38
              }
            },
            "file": "/Users/bbevillard/Documents/Bev/Code/Web/nlopt-js/src/classes/Optimize.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "fun",
              "lineNumber": 2,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Constraint function",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 20,
                            "offset": 19
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 20,
                        "offset": 19
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 20,
                    "offset": 19
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "Function"
              }
            },
            {
              "title": "param",
              "name": "tol",
              "lineNumber": 3,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Tolerance",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 10,
                            "offset": 9
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 10,
                        "offset": 9
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 10,
                    "offset": 9
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "Array"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "addEqualityMConstraint",
          "kind": "function",
          "memberof": "Optimize",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Optimize",
              "kind": "class"
            },
            {
              "name": "addEqualityMConstraint",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "Optimize#addEqualityMConstraint"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Set a max time stopping criterion",
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 34,
                        "offset": 33
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 34,
                    "offset": 33
                  },
                  "indent": []
                }
              }
            ],
            "position": {
              "start": {
                "line": 1,
                "column": 1,
                "offset": 0
              },
              "end": {
                "line": 1,
                "column": 34,
                "offset": 33
              }
            }
          },
          "tags": [
            {
              "title": "param",
              "description": "Max optimisation time",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "t"
            }
          ],
          "loc": {
            "start": {
              "line": 126,
              "column": 2
            },
            "end": {
              "line": 129,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 130,
                "column": 2
              },
              "end": {
                "line": 130,
                "column": 19
              }
            },
            "file": "/Users/bbevillard/Documents/Bev/Code/Web/nlopt-js/src/classes/Optimize.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "t",
              "lineNumber": 2,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Max optimisation time",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 22,
                            "offset": 21
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 22,
                        "offset": 21
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 22,
                    "offset": 21
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "setMaxtime",
          "kind": "function",
          "memberof": "Optimize",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Optimize",
              "kind": "class"
            },
            {
              "name": "setMaxtime",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "Optimize#setMaxtime"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Set a max evaluation stopping criterion",
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 40,
                        "offset": 39
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 40,
                    "offset": 39
                  },
                  "indent": []
                }
              }
            ],
            "position": {
              "start": {
                "line": 1,
                "column": 1,
                "offset": 0
              },
              "end": {
                "line": 1,
                "column": 40,
                "offset": 39
              }
            }
          },
          "tags": [
            {
              "title": "param",
              "description": "Max evalutation count",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "count"
            }
          ],
          "loc": {
            "start": {
              "line": 132,
              "column": 2
            },
            "end": {
              "line": 135,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 136,
                "column": 2
              },
              "end": {
                "line": 136,
                "column": 23
              }
            },
            "file": "/Users/bbevillard/Documents/Bev/Code/Web/nlopt-js/src/classes/Optimize.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "count",
              "lineNumber": 2,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Max evalutation count",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 22,
                            "offset": 21
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 22,
                        "offset": 21
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 22,
                    "offset": 21
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "setMaxeval",
          "kind": "function",
          "memberof": "Optimize",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Optimize",
              "kind": "class"
            },
            {
              "name": "setMaxeval",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "Optimize#setMaxeval"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Run the optimizer, and returns upon completion an object containing the optimized values of the optimization parameters as well as the corresponding value of the objective function",
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 181,
                        "offset": 180
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 181,
                    "offset": 180
                  },
                  "indent": []
                }
              }
            ],
            "position": {
              "start": {
                "line": 1,
                "column": 1,
                "offset": 0
              },
              "end": {
                "line": 1,
                "column": 181,
                "offset": 180
              }
            }
          },
          "tags": [
            {
              "title": "param",
              "description": "Initial guess for the optimization parameters",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Array"
              },
              "name": "x0"
            },
            {
              "title": "returns",
              "description": "{ x: number[], value: number }",
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            },
            {
              "title": "example",
              "description": "const opt = new nlopt.Optimize(nlopt.Algorithm.LD_AUGLAG, 2);\nopt.setMinObjective((x, grad) => {\n  if (grad) {\n    grad[0] = 0\n    grad[1] = 0.5 / Math.sqrt(x[1])\n  }\n  return Math.sqrt(x[1])\n}, 1e-4);\nopt.setLowerBounds([-1e500, 1e-8]);\nconst p1 = { a: 2, b: 0 };\nconst p2 = { a: -1, b: 1 };\nopt.addEqualityMConstraint((x, grad, r) => {\n  if (grad) {\n    grad[0] = 3 * p1.a * Math.pow(p1.a * x[0] + p1.b, 2)\n    grad[1] = -1.0\n    grad[2] = 3 * p2.a * Math.pow(p2.a * x[0] + p2.b, 2)\n    grad[3] = -1.0\n  }\n  r[0] = (Math.pow(p1.a * x[0] + p1.b, 3) - x[1])\n  r[1] = (Math.pow(p2.a * x[0] + p2.b, 3) - x[1])\n}, [1e-8, 1e-8]);\nconst res = opt.optimize([1, 6]);\nreturn {x: res.x, value: res.value};",
              "lineNumber": 4
            }
          ],
          "loc": {
            "start": {
              "line": 138,
              "column": 2
            },
            "end": {
              "line": 166,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 167,
                "column": 2
              },
              "end": {
                "line": 167,
                "column": 18
              }
            },
            "file": "/Users/bbevillard/Documents/Bev/Code/Web/nlopt-js/src/classes/Optimize.js"
          },
          "augments": [],
          "examples": [
            {
              "description": "const opt = new nlopt.Optimize(nlopt.Algorithm.LD_AUGLAG, 2);\nopt.setMinObjective((x, grad) => {\n  if (grad) {\n    grad[0] = 0\n    grad[1] = 0.5 / Math.sqrt(x[1])\n  }\n  return Math.sqrt(x[1])\n}, 1e-4);\nopt.setLowerBounds([-1e500, 1e-8]);\nconst p1 = { a: 2, b: 0 };\nconst p2 = { a: -1, b: 1 };\nopt.addEqualityMConstraint((x, grad, r) => {\n  if (grad) {\n    grad[0] = 3 * p1.a * Math.pow(p1.a * x[0] + p1.b, 2)\n    grad[1] = -1.0\n    grad[2] = 3 * p2.a * Math.pow(p2.a * x[0] + p2.b, 2)\n    grad[3] = -1.0\n  }\n  r[0] = (Math.pow(p1.a * x[0] + p1.b, 3) - x[1])\n  r[1] = (Math.pow(p2.a * x[0] + p2.b, 3) - x[1])\n}, [1e-8, 1e-8]);\nconst res = opt.optimize([1, 6]);\nreturn {x: res.x, value: res.value};"
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "x0",
              "lineNumber": 2,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Initial guess for the optimization parameters",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 46,
                            "offset": 45
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 46,
                        "offset": 45
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 46,
                    "offset": 45
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "Array"
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "{ x: number[], value: number }",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 31,
                            "offset": 30
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 31,
                        "offset": 30
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 31,
                    "offset": 30
                  }
                }
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "optimize",
          "kind": "function",
          "memberof": "Optimize",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "Optimize",
              "kind": "class"
            },
            {
              "name": "optimize",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "Optimize#optimize"
        }
      ],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "Optimize",
        "kind": "class"
      }
    ],
    "namespace": "Optimize"
  }
]